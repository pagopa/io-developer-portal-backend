# Azure DevOps pipeline to release a new version and deploy to production.

# Only manual activations are intended
trigger: none
pr: none

parameters:
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: minor

# This pipeline has been implemented to be run on hosted agent pools based both
# on 'windows' and 'ubuntu' virtual machine images and using the scripts defined
# in the package.json file. Since we are deploying on Azure functions on Windows
# runtime, the pipeline is currently configured to use a Windows hosted image for
# the build and deploy.
pool:
  vmImage: 'windows-2019'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v19
      endpoint: 'io-azure-devops-github-ro'

stages:

  # Create a relase
  # Activated when ONE OF these are met:
  # - is on branch $(DEFAULT_BRANCH)
  # - is a tag in the form v{version}-RELEASE
  - stage: Release
    condition:
      or(
        eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables.DEFAULT_BRANCH)),
        and(
          startsWith(variables['Build.SourceBranch'], 'refs/tags'),
          endsWith(variables['Build.SourceBranch'], '-RELEASE')
        )
      )
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: make_release
        condition: eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables.DEFAULT_BRANCH))
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              persistCredentials: true
          - template: templates/node-github-release/template.yaml@pagopaCommons
            parameters:
              release_branch: '$(DEFAULT_BRANCH)'
              semver: '${{ parameters.RELEASE_SEMVER }}'
              gitEmail: '$(GIT_EMAIL)'
              gitUsername: '$(GIT_USERNAME)'
              gitHubConnection: '$(GITHUB_CONNECTION)'

      - job: skip_release
        condition: ne(variables['Build.SourceBranch'], format('refs/heads/{0}', variables.DEFAULT_BRANCH))
        steps:
          - script: |
              echo "We assume this reference to be a valid release: $(Build.SourceBranch). Therefore, there is no need to bundle a new release."
            displayName: 'Skip release bundle'

  # Prepare_artifact
  - stage: Prepare_artifact
    dependsOn:
      - Release
    jobs:
      - job: 'prepare_artifact'
        steps:
          # Build application
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              # On the assumption that this stage is executed only when Relase stage is,
              #  with this parameter we set the reference the deploy script must pull changes from.
              # The branch/tag name is calculated from the source branch
              #  ex: Build.SourceBranch=refs/heads/$(DEFAULT_BRANCH) --> $(DEFAULT_BRANCH)
              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --> v1.2.3-RELEASE
              gitReference: ${{ replace(replace(variables['Build.SourceBranch'], 'refs/tags/', ''), 'refs/heads/', '') }}
          - script: |
              yarn predeploy
            displayName: 'Build'
  
          # Copy application to  
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              TargetFolder: '$(System.DefaultWorkingDirectory)/bundle'
              Contents: |
                **/*
                !.git/**/*
                !.vscode/**/*
                !.devops/**/*
                ![.]*
                !scripts/**/*
                !**/*.js.map
                !**/*.ts
                !.devops/**/*
                !*.md
                !docker-compose.yml
                !Dangerfile.ts
                !jest.config.js
                !local.settings.json
                !test
                !tslint.json
                !tsconfig.json
            displayName: 'Copy deploy files'
          
          - publish: $(System.DefaultWorkingDirectory)/bundle
            artifact: Bundle

  # Deploy 
  - stage: 'Deploy_to_prod'
    dependsOn:
      - Prepare_artifact
    jobs:
      - job: 'do_deploy_production_slot'
        steps:
          - checkout: none
          - download: current
            artifact: Bundle

          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(PROD_AZURE_SUBSCRIPTION)'
              resourceGroupName: '$(PROD_WEB_APP_RESOURCE_GROUP_NAME)'
              appType: 'webApp'
              appName: '$(PROD_WEB_APP_NAME)'
              package: '$(Pipeline.Workspace)/Bundle'
              deploymentMethod: 'auto'
              deployToSlotOrASE: true
              slotName: 'production'
            displayName: 'Deploy to production slot'
